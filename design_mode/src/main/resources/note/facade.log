1.什么是外观模式
  为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易；

  Facade:定义子系统多个模块对外的高层接口，通常需要调用内部多个模块，从而把客户的请求代理给适当的子系统对象；
  模块：接受Facada对象的委派，真正实现功能，各个操作之间可能相互交互。
  注意：Facade对象知道各个模块，但是各个模块不应该知道Facade对象；

2.外观模式的目的：
   外观模式的目的不是给子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单的使用子系统；

3.外观模式的实现
  1.把外观类当成一个辅助工具类实现
  2.Facade可以实现成为Interface
  3.Facade实现成为interface的附带好处，能够有选择的暴露接口方法，尽量减少模块对子系统外提供的接口方法；
  4.facade的方法实现中，一般是负责把客户端的请求转发给子系统内部的各个模块进行处理，facade的方法本身并不进行功能处理，facade的方法只是实现一个功能的组合调用；

4.外观模式的优缺点
  1.松散耦合
  2.简单易用
  3.更好的划分访问层次
  4.过多的或者不太合理的facade也容易让人迷糊

5.外观模式的本质
  1.外观模式的本质是：封装交互，简化调用

6.对设计原则的体现
  体现了-- 最少知识的原则

7.合适选用外观模式
  1.如果希望为一个复杂的子系统提供一个简单接口的时候；可以考虑使用外观模式，使用外观对象来实现大部分客户需要的功能，从而简化客户使用；
  2.如果想让客户程序和抽象类的实现部分松散耦合，可以考虑使用外观模式，使用外观对象来将这个子系统与它的客户分离开来，从而提供子系统的独立性和可移植性；
  3. 如果构建多层结构的系统，可以考虑使用外观模式，使用外观对象作为每层的入口，这样可以简化层间调用，也可以松散层次之间的依赖关系；





