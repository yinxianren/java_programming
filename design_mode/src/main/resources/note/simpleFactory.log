1.简单工厂的定义：
  提供一个创建对象实例的功能，而无须关心其具体实现，被创建实例的类型可以是接口、抽象类、也可以是具体的类；

2.接口用来干什么？
  通常接口来定义实现类的外观，就相当于一份契约，根据外部应用需要的功能，约定了实现类应该要实现的功能；

3.接口的实现---> 封装隔离

4.使用接口的好处
  只要接口不变，内部实现的变化就不会影响到外部的应用，从而使得系统更灵活，具有更好的扩展性和可维护性

5.接口抽象类的选择
  1.优先选用接口
  2.在如下情况下选择抽象类：既要定义子类，又要为子类提供公共的功能

6.面向接口编程
  面向接口编程是java编程的一个重要的原则，在java程序设计里面，非常讲究的划分和模块划分

7.不管是一层还是一个模型或者一个组件，都是一个被接口隔离的整体

8.认识简单工厂
  1.简单工厂的功能
    可以用来创建的接口、抽象类或者是普通类的实例
  2.静态工厂
    通常把简单工厂类实现成一个工具类，直接使用静态方法就可以了，也就是说简单工厂的方法通常都是静态的，所以也被称为静态工厂；
  3.万能工厂
    一个简单工厂理论上可以用来构造任何对象，所以又称之为“万能工厂”
  4.简单工厂创建对象的范围
    建议控制在一个独立的组件级别或者一个模块级别


9.简单工厂命名的建议
  1.类名建议为“模块名称+Factory”,比如：用户模块的工厂就称为：UserFactory
  2.方法名称通常为“get+接口名称”，或者是“create+接口名称”
  3.不建议吧方法名称命名为“new+接口名称”

10.简单工厂中方法的写法
   简单工厂方法的内部主要实现的功能是“选择合适的实现类”来创建实例对象

   如果是从客户端在调用工厂的时候，传入选择的参数，这就说明客户端必须知道每个参数的含义，也需要理解每个参数对应的功能，这就要求必须在一定程度上，向客户暴露一定的内部实现细节；

11.可配置的简单工厂
   1.参数来源于配置文件
   2.使用反射加上配置文件，来实现添加新的实现类过后，无须修改代码，就能把这个新的实现类加入应用中；

12.简单工厂的优缺点
   1.帮助封装
   2.解耦
   3.可能增加客户端的复杂度
   4.不方便扩展子工厂
13.简单工厂的本质：选择实现
14.何时选用简单工厂
   1.如果想要完全封装隔离具体实现，让外部只能通过接口来操作封装体，那么可以选用简单工厂，让客户通过工厂相应的接口，而无需关系具体实现；
   2.如果想要把对外部对象的职责集中管理和控制，可以选用简单工厂，一个简单工厂可以创建很多的、不相关的对象，可以吧对外创建对象职责集中到一个简单工厂来，从而实现集中管理和控制；
